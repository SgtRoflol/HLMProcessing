/* autogenerated by Processing revision 1293 on 2024-01-22 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class Spiel3 extends PApplet {

Camera worldCamera;
Player Play;
int ammo = 10;
Projectile[] Bullets = new Projectile[ammo];


int imgX;
int imgY;


public void setup() {
    /* smooth commented out by preprocessor */;
    /* size commented out by preprocessor */;
    worldCamera = new Camera();
    Play = new Player();
    for (int i = 0; i < Bullets.length; i++) {
        Bullets[i] = new Projectile(4);
    }
}

public void draw() {
    background(255);
    //Alles andere muss nach der Worldcamera gezeichnet werden!
    pushMatrix();
    translate( -worldCamera.pos.x, -worldCamera.pos.y);
    worldCamera.draw();
    text(ammo,20,20);
    for (int i = 0; i < Bullets.length; i++) {
        Bullets[i].render();
    }
    //WorldCamera Ende
    rect(25,25,25,25);
    popMatrix();
    
    Play.move();
    println(Play.x);
    
    
    
}
public void mouseClicked() {
    for (int i = 0; i < Bullets.length; i++) {
        if (!Bullets[i].isActive && ammo < 0) {
            Bullets[i].spawn();
            ammo--;
            break;
        }
    }
    
    
    void keyPressed() {
        if (key == 'r') {
            ammo = 10;
        }
    }
}

class Camera {
    PVector pos;
    
    Camera() {
        pos = new PVector(0, 0);
    }
    
    public void draw() {
        if (keyPressed) {
            if (key == 'w') pos.y -= 5;
            if (key == 's') pos.y += 5;
            if (key == 'a') pos.x -= 5;
            if (key == 'd') pos.x += 5;
        }
    }
}
class Player{
    float angle;
    float x;
    float y;
    int farbe;
    
    Player() {
        x = width / 2;
        y = height / 2;
        farbe = color(255,0,0,10);
    }
    
    public void render() {
        int curcol = g.fillColor;
        fill(farbe);
        rectMode(CENTER);
        rect(0,0,50,50);
        fill(curcol);
    }
    
    
    public void move() {
        pushMatrix();
        angle = atan2(x - mouseX, y - mouseY);
        translate(x, y);
        rotate( -angle - HALF_PI);
        render();
        popMatrix();
    }
    
}
class Projectile{
    boolean isActive;
    PVector Pos;
    float speed;
    PVector dir;
    
    Projectile(float speed) {
        this.speed = speed;
        init();
    }
    
    public void init() {
        isActive = false;
        Pos = new PVector(width / 2,height / 2);
        Pos.x = worldCamera.pos.x + width / 2;
        Pos.y = worldCamera.pos.y + height / 2;
        dir = new PVector(0,0);
    }
    
    public void spawn() {
        init();
        PVector mouse = new PVector(worldCamera.pos.x + mouseX,worldCamera.pos.y + mouseY);
        dir = PVector.sub(mouse,Pos);
        dir.normalize();
        dir.mult(speed);
        isActive = true;
        Pos.x = worldCamera.pos.x + width / 2;
        Pos.y = worldCamera.pos.y + height / 2;
    }
    
    public void render() {
        ellipseMode(CENTER);
        int curcol = g.fillColor;
        fill(255, 255, 0);
        if (isActive) {
            checkBounds();
            println(dir.x);
            println(dir.y);
            Pos = Pos.add(dir);
            ellipse(Pos.x,Pos.y,10,10);
        }
        else{
            Pos.x = worldCamera.pos.x + width / 2;
            Pos.y = worldCamera.pos.y + height / 2;
            ellipse(Pos.x,Pos.y,10,10);
        }
        fill(curcol);
    }
    
    public void checkBounds() {
        if (Pos.x > worldCamera.pos.x + width || Pos.x < worldCamera.pos.x) {
            init();
        }
        
        if (Pos.y > worldCamera.pos.y + height || Pos.y < worldCamera.pos.y) {
            init();
        }
    }
    
}


  public void settings() { size(640, 640);
smooth(2); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "Spiel3" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
